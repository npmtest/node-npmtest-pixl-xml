{"/home/travis/build/npmtest/node-npmtest-pixl-xml/test.js":"/* istanbul instrument in package npmtest_pixl_xml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pixl-xml/lib.npmtest_pixl_xml.js":"/* istanbul instrument in package npmtest_pixl_xml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pixl_xml = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pixl_xml = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pixl-xml/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pixl-xml && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pixl_xml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pixl_xml\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pixl_xml.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pixl_xml.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pixl_xml.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pixl_xml.__dirname + '/lib.npmtest_pixl_xml.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pixl-xml/node_modules/pixl-xml/xml.js":"/*\n\tJavaScript XML Library\n\tPlus a bunch of object utility functions\n\t\n\tUsage:\n\t\tvar XML = require('pixl-xml');\n\t\tvar myxmlstring = '<?xml version=\"1.0\"?><Document>' + \n\t\t\t'<Simple>Hello</Simple>' + \n\t\t\t'<Node Key=\"Value\">Content</Node>' + \n\t\t\t'</Document>';\n\t\t\n\t\tvar tree = XML.parse( myxmlstring, { preserveAttributes: true });\n\t\tconsole.log( tree );\n\t\t\n\t\ttree.Simple = \"Hello2\";\n\t\ttree.Node._Attribs.Key = \"Value2\";\n\t\ttree.Node._Data = \"Content2\";\n\t\ttree.New = \"I added this\";\n\t\t\n\t\tconsole.log( XML.stringify( tree, 'Document' ) );\n\t\n\tCopyright (c) 2004 - 2015 Joseph Huckaby\n\tReleased under the MIT License\n\tThis version is for Node.JS, converted in 2012.\n*/\n\nvar fs = require('fs');\nvar util = require('util');\n\nvar isArray = Array.isArray || util.isArray; // support for older Node.js\n\nvar xml_header = '<?xml version=\"1.0\"?>';\nvar sort_args = null;\nvar re_valid_tag_name  = /^\\w[\\w\\-\\:]*$/;\n\nvar XML = exports.XML = exports.Parser = function XML(args, opts) {\n\t// class constructor for XML parser class\n\t// pass in args hash or text to parse\n\tif (!args) args = '';\n\tif (isa_hash(args)) {\n\t\tfor (var key in args) this[key] = args[key];\n\t}\n\telse this.text = args || '';\n\t\n\t// options may be 2nd argument as well\n\tif (opts) {\n\t\tfor (var key in opts) this[key] = opts[key];\n\t}\n\t\n\t// stringify buffers\n\tif (this.text instanceof Buffer) {\n\t\tthis.text = this.text.toString();\n\t}\n\t\n\tif (!this.text.match(/^\\s*</)) {\n\t\t// try as file path\n\t\tvar file = this.text;\n\t\tthis.text = fs.readFileSync(file, { encoding: 'utf8' });\n\t\tif (!this.text) throw new Error(\"File not found: \" + file);\n\t}\n\t\n\tthis.tree = {};\n\tthis.errors = [];\n\tthis.piNodeList = [];\n\tthis.dtdNodeList = [];\n\tthis.documentNodeName = '';\n\t\n\tif (this.lowerCase) {\n\t\tthis.attribsKey = this.attribsKey.toLowerCase();\n\t\tthis.dataKey = this.dataKey.toLowerCase();\n\t}\n\t\n\tthis.patTag.lastIndex = 0;\n\tif (this.text) this.parse();\n}\n\nXML.prototype.preserveDocumentNode = false;\nXML.prototype.preserveAttributes = false;\nXML.prototype.lowerCase = false;\n\nXML.prototype.patTag = /([^<]*?)<([^>]+)>/g;\nXML.prototype.patSpecialTag = /^\\s*([\\!\\?])/;\nXML.prototype.patPITag = /^\\s*\\?/;\nXML.prototype.patCommentTag = /^\\s*\\!--/;\nXML.prototype.patDTDTag = /^\\s*\\!DOCTYPE/;\nXML.prototype.patCDATATag = /^\\s*\\!\\s*\\[\\s*CDATA/;\nXML.prototype.patStandardTag = /^\\s*(\\/?)([\\w\\-\\:\\.]+)\\s*([\\s\\S]*)$/;\nXML.prototype.patSelfClosing = /\\/\\s*$/;\nXML.prototype.patAttrib = new RegExp(\"([\\\\w\\\\-\\\\:\\\\.]+)\\\\s*=\\\\s*([\\\\\\\"\\\\'])([^\\\\2]*?)\\\\2\", \"g\");\nXML.prototype.patPINode = /^\\s*\\?\\s*([\\w\\-\\:]+)\\s*(.*)$/;\nXML.prototype.patEndComment = /--$/;\nXML.prototype.patNextClose = /([^>]*?)>/g;\nXML.prototype.patExternalDTDNode = new RegExp(\"^\\\\s*\\\\!DOCTYPE\\\\s+([\\\\w\\\\-\\\\:]+)\\\\s+(SYSTEM|PUBLIC)\\\\s+\\\\\\\"([^\\\\\\\"]+)\\\\\\\"\");\nXML.prototype.patInlineDTDNode = /^\\s*\\!DOCTYPE\\s+([\\w\\-\\:]+)\\s+\\[/;\nXML.prototype.patEndDTD = /\\]$/;\nXML.prototype.patDTDNode = /^\\s*\\!DOCTYPE\\s+([\\w\\-\\:]+)\\s+\\[(.*)\\]/;\nXML.prototype.patEndCDATA = /\\]\\]$/;\nXML.prototype.patCDATANode = /^\\s*\\!\\s*\\[\\s*CDATA\\s*\\[([^]*)\\]\\]/;\n\nXML.prototype.attribsKey = '_Attribs';\nXML.prototype.dataKey = '_Data';\n\nXML.prototype.parse = function(branch, name) {\n\t// parse text into XML tree, recurse for nested nodes\n\tif (!branch) branch = this.tree;\n\tif (!name) name = null;\n\tvar foundClosing = false;\n\tvar matches = null;\n\t\n\t// match each tag, plus preceding text\n\twhile ( matches = this.patTag.exec(this.text) ) {\n\t\tvar before = matches[1];\n\t\tvar tag = matches[2];\n\t\t\n\t\t// text leading up to tag = content of parent node\n\t\tif (before.match(/\\S/)) {\n\t\t\tif (typeof(branch[this.dataKey]) != 'undefined') branch[this.dataKey] += ' '; else branch[this.dataKey] = '';\n\t\t\tbranch[this.dataKey] += trim(decode_entities(before));\n\t\t}\n\t\t\n\t\t// parse based on tag type\n\t\tif (tag.match(this.patSpecialTag)) {\n\t\t\t// special tag\n\t\t\tif (tag.match(this.patPITag)) tag = this.parsePINode(tag);\n\t\t\telse if (tag.match(this.patCommentTag)) tag = this.parseCommentNode(tag);\n\t\t\telse if (tag.match(this.patDTDTag)) tag = this.parseDTDNode(tag);\n\t\t\telse if (tag.match(this.patCDATATag)) {\n\t\t\t\ttag = this.parseCDATANode(tag);\n\t\t\t\tif (typeof(branch[this.dataKey]) != 'undefined') branch[this.dataKey] += ' '; else branch[this.dataKey] = '';\n\t\t\t\tbranch[this.dataKey] += trim(decode_entities(tag));\n\t\t\t} // cdata\n\t\t\telse {\n\t\t\t\tthis.throwParseError( \"Malformed special tag\", tag );\n\t\t\t\tbreak;\n\t\t\t} // error\n\t\t\t\n\t\t\tif (tag == null) break;\n\t\t\tcontinue;\n\t\t} // special tag\n\t\telse {\n\t\t\t// Tag is standard, so parse name and attributes (if any)\n\t\t\tvar matches = tag.match(this.patStandardTag);\n\t\t\tif (!matches) {\n\t\t\t\tthis.throwParseError( \"Malformed tag\", tag );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tvar closing = matches[1];\n\t\t\tvar nodeName = this.lowerCase ? matches[2].toLowerCase() : matches[2];\n\t\t\tvar attribsRaw = matches[3];\n\t\t\t\n\t\t\t// If this is a closing tag, make sure it matches its opening tag\n\t\t\tif (closing) {\n\t\t\t\tif (nodeName == (name || '')) {\n\t\t\t\t\tfoundClosing = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.throwParseError( \"Mismatched closing tag (expected </\" + name + \">)\", tag );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} // closing tag\n\t\t\telse {\n\t\t\t\t// Not a closing tag, so parse attributes into hash.  If tag\n\t\t\t\t// is self-closing, no recursive parsing is needed.\n\t\t\t\tvar selfClosing = !!attribsRaw.match(this.patSelfClosing);\n\t\t\t\tvar leaf = {};\n\t\t\t\tvar attribs = leaf;\n\t\t\t\t\n\t\t\t\t// preserve attributes means they go into a sub-hash named \"_Attribs\"\n\t\t\t\t// the XML composer honors this for restoring the tree back into XML\n\t\t\t\tif (this.preserveAttributes) {\n\t\t\t\t\tleaf[this.attribsKey] = {};\n\t\t\t\t\tattribs = leaf[this.attribsKey];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// parse attributes\n\t\t\t\tthis.patAttrib.lastIndex = 0;\n\t\t\t\twhile ( matches = this.patAttrib.exec(attribsRaw) ) {\n\t\t\t\t\tvar key = this.lowerCase ? matches[1].toLowerCase() : matches[1];\n\t\t\t\t\tattribs[ key ] = decode_entities( matches[3] );\n\t\t\t\t} // foreach attrib\n\t\t\t\t\n\t\t\t\t// if no attribs found, but we created the _Attribs subhash, clean it up now\n\t\t\t\tif (this.preserveAttributes && !num_keys(attribs)) {\n\t\t\t\t\tdelete leaf[this.attribsKey];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Recurse for nested nodes\n\t\t\t\tif (!selfClosing) {\n\t\t\t\t\tthis.parse( leaf, nodeName );\n\t\t\t\t\tif (this.error()) break;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compress into simple node if text only\n\t\t\t\tvar num_leaf_keys = num_keys(leaf);\n\t\t\t\tif ((typeof(leaf[this.dataKey]) != 'undefined') && (num_leaf_keys == 1)) {\n\t\t\t\t\tleaf = leaf[this.dataKey];\n\t\t\t\t}\n\t\t\t\telse if (!num_leaf_keys) {\n\t\t\t\t\tleaf = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Add leaf to parent branch\n\t\t\t\tif (typeof(branch[nodeName]) != 'undefined') {\n\t\t\t\t\tif (isa_array(branch[nodeName])) {\n\t\t\t\t\t\tbranch[nodeName].push( leaf );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar temp = branch[nodeName];\n\t\t\t\t\t\tbranch[nodeName] = [ temp, leaf ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbranch[nodeName] = leaf;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.error() || (branch == this.tree)) break;\n\t\t\t} // not closing\n\t\t} // standard tag\n\t} // main reg exp\n\t\n\t// Make sure we found the closing tag\n\tif (name && !foundClosing) {\n\t\tthis.throwParseError( \"Missing closing tag (expected </\" + name + \">)\", name );\n\t}\n\t\n\t// If we are the master node, finish parsing and setup our doc node\n\tif (branch == this.tree) {\n\t\tif (typeof(this.tree[this.dataKey]) != 'undefined') delete this.tree[this.dataKey];\n\t\t\n\t\tif (num_keys(this.tree) > 1) {\n\t\t\tthis.throwParseError( 'Only one top-level node is allowed in document', first_key(this.tree) );\n\t\t\treturn;\n\t\t}\n\n\t\tthis.documentNodeName = first_key(this.tree);\n\t\tif (this.documentNodeName && !this.preserveDocumentNode) {\n\t\t\tthis.tree = this.tree[this.documentNodeName];\n\t\t}\n\t}\n};\n\nXML.prototype.throwParseError = function(key, tag) {\n\t// log error and locate current line number in source XML document\n\tvar parsedSource = this.text.substring(0, this.patTag.lastIndex);\n\tvar eolMatch = parsedSource.match(/\\n/g);\n\tvar lineNum = (eolMatch ? eolMatch.length : 0) + 1;\n\tlineNum -= tag.match(/\\n/) ? tag.match(/\\n/g).length : 0;\n\t\n\tthis.errors.push({ \n\t\ttype: 'Parse',\n\t\tkey: key,\n\t\ttext: '<' + tag + '>',\n\t\tline: lineNum\n\t});\n\t\n\t// Throw actual error (must wrap parse in try/catch)\n\tthrow new Error( this.getLastError() );\n};\n\nXML.prototype.error = function() {\n\t// return number of errors\n\treturn this.errors.length;\n};\n\nXML.prototype.getError = function(error) {\n\t// get formatted error\n\tvar text = '';\n\tif (!error) return '';\n\n\ttext = (error.type || 'General') + ' Error';\n\tif (error.code) text += ' ' + error.code;\n\ttext += ': ' + error.key;\n\t\n\tif (error.line) text += ' on line ' + error.line;\n\tif (error.text) text += ': ' + error.text;\n\n\treturn text;\n};\n\nXML.prototype.getLastError = function() {\n\t// Get most recently thrown error in plain text format\n\tif (!this.error()) return '';\n\treturn this.getError( this.errors[this.errors.length - 1] );\n};\n\nXML.prototype.parsePINode = function(tag) {\n\t// Parse Processor Instruction Node, e.g. <?xml version=\"1.0\"?>\n\tif (!tag.match(this.patPINode)) {\n\t\tthis.throwParseError( \"Malformed processor instruction\", tag );\n\t\treturn null;\n\t}\n\t\n\tthis.piNodeList.push( tag );\n\treturn tag;\n};\n\nXML.prototype.parseCommentNode = function(tag) {\n\t// Parse Comment Node, e.g. <!-- hello -->\n\tvar matches = null;\n\tthis.patNextClose.lastIndex = this.patTag.lastIndex;\n\t\n\twhile (!tag.match(this.patEndComment)) {\n\t\tif (matches = this.patNextClose.exec(this.text)) {\n\t\t\ttag += '>' + matches[1];\n\t\t}\n\t\telse {\n\t\t\tthis.throwParseError( \"Unclosed comment tag\", tag );\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tthis.patTag.lastIndex = this.patNextClose.lastIndex;\n\treturn tag;\n};\n\nXML.prototype.parseDTDNode = function(tag) {\n\t// Parse Document Type Descriptor Node, e.g. <!DOCTYPE ... >\n\tvar matches = null;\n\t\n\tif (tag.match(this.patExternalDTDNode)) {\n\t\t// tag is external, and thus self-closing\n\t\tthis.dtdNodeList.push( tag );\n\t}\n\telse if (tag.match(this.patInlineDTDNode)) {\n\t\t// Tag is inline, so check for nested nodes.\n\t\tthis.patNextClose.lastIndex = this.patTag.lastIndex;\n\t\t\n\t\twhile (!tag.match(this.patEndDTD)) {\n\t\t\tif (matches = this.patNextClose.exec(this.text)) {\n\t\t\t\ttag += '>' + matches[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.throwParseError( \"Unclosed DTD tag\", tag );\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.patTag.lastIndex = this.patNextClose.lastIndex;\n\t\t\n\t\t// Make sure complete tag is well-formed, and push onto DTD stack.\n\t\tif (tag.match(this.patDTDNode)) {\n\t\t\tthis.dtdNodeList.push( tag );\n\t\t}\n\t\telse {\n\t\t\tthis.throwParseError( \"Malformed DTD tag\", tag );\n\t\t\treturn null;\n\t\t}\n\t}\n\telse {\n\t\tthis.throwParseError( \"Malformed DTD tag\", tag );\n\t\treturn null;\n\t}\n\t\n\treturn tag;\n};\n\nXML.prototype.parseCDATANode = function(tag) {\n\t// Parse CDATA Node, e.g. <![CDATA[Brooks & Shields]]>\n\tvar matches = null;\n\tthis.patNextClose.lastIndex = this.patTag.lastIndex;\n\t\n\twhile (!tag.match(this.patEndCDATA)) {\n\t\tif (matches = this.patNextClose.exec(this.text)) {\n\t\t\ttag += '>' + matches[1];\n\t\t}\n\t\telse {\n\t\t\tthis.throwParseError( \"Unclosed CDATA tag\", tag );\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tthis.patTag.lastIndex = this.patNextClose.lastIndex;\n\t\n\tif (matches = tag.match(this.patCDATANode)) {\n\t\treturn matches[1];\n\t}\n\telse {\n\t\tthis.throwParseError( \"Malformed CDATA tag\", tag );\n\t\treturn null;\n\t}\n};\n\nXML.prototype.getTree = function() {\n\t// get reference to parsed XML tree\n\treturn this.tree;\n};\n\nXML.prototype.compose = function(indent_string, eol) {\n\t// compose tree back into XML\n\tif (typeof(eol) == 'undefined') eol = \"\\n\";\n\tvar tree = this.tree;\n\tif (this.preserveDocumentNode) tree = tree[this.documentNodeName];\n\t\n\tvar raw = compose_xml( tree, this.documentNodeName, 0, indent_string, eol );\n\tvar body = raw.replace(/^\\s*\\<\\?.+?\\?\\>\\s*/, '');\n\tvar xml = '';\n\t\n\tif (this.piNodeList.length) {\n\t\tfor (var idx = 0, len = this.piNodeList.length; idx < len; idx++) {\n\t\t\txml += '<' + this.piNodeList[idx] + '>' + eol;\n\t\t}\n\t}\n\telse {\n\t\txml += xml_header + eol;\n\t}\n\t\n\tif (this.dtdNodeList.length) {\n\t\tfor (var idx = 0, len = this.dtdNodeList.length; idx < len; idx++) {\n\t\t\txml += '<' + this.dtdNodeList[idx] + '>' + eol;\n\t\t}\n\t}\n\t\n\txml += body;\n\treturn xml;\n};\n\n//\n// Static Utility Functions:\n//\n\nvar parse_xml = exports.parse = function parse_xml(text, opts) {\n\t// turn text into XML tree quickly\n\tif (!opts) opts = {};\n\topts.text = text;\n\tvar parser = new XML(opts);\n\treturn parser.error() ? parser.getLastError() : parser.getTree();\n};\n\nvar trim = exports.trim = function trim(text) {\n\t// strip whitespace from beginning and end of string\n\tif (text == null) return '';\n\t\n\tif (text && text.replace) {\n\t\ttext = text.replace(/^\\s+/, \"\");\n\t\ttext = text.replace(/\\s+$/, \"\");\n\t}\n\t\n\treturn text;\n};\n\nvar encode_entities = exports.encodeEntities = function encode_entities(text) {\n\t// Simple entitize exports.for = function for composing XML\n\tif (text == null) return '';\n\t\n\tif (text && text.replace) {\n\t\ttext = text.replace(/\\&/g, \"&amp;\"); // MUST BE FIRST\n\t\ttext = text.replace(/</g, \"&lt;\");\n\t\ttext = text.replace(/>/g, \"&gt;\");\n\t}\n\t\n\treturn text;\n};\n\nvar encode_attrib_entities = exports.encodeAttribEntities = function encode_attrib_entities(text) {\n\t// Simple entitize exports.for = function for composing XML attributes\n\tif (text == null) return '';\n\t\n\tif (text && text.replace) {\n\t\ttext = text.replace(/\\&/g, \"&amp;\"); // MUST BE FIRST\n\t\ttext = text.replace(/</g, \"&lt;\");\n\t\ttext = text.replace(/>/g, \"&gt;\");\n\t\ttext = text.replace(/\\\"/g, \"&quot;\");\n\t\ttext = text.replace(/\\'/g, \"&apos;\");\n\t}\n\t\n\treturn text;\n};\n\nvar decode_entities = exports.decodeEntities = function decode_entities(text) {\n\t// Decode XML entities into raw ASCII\n\tif (text == null) return '';\n\t\n\tif (text && text.replace && text.match(/\\&/)) {\n\t\ttext = text.replace(/\\&lt\\;/g, \"<\");\n\t\ttext = text.replace(/\\&gt\\;/g, \">\");\n\t\ttext = text.replace(/\\&quot\\;/g, '\"');\n\t\ttext = text.replace(/\\&apos\\;/g, \"'\");\n\t\ttext = text.replace(/\\&amp\\;/g, \"&\"); // MUST BE LAST\n\t}\n\t\n\treturn text;\n};\n\nvar compose_xml = exports.stringify = function compose_xml(node, name, indent, indent_string, eol) {\n\t// Compose node into XML including attributes\n\t// Recurse for child nodes\n\tif (typeof(indent_string) == 'undefined') indent_string = \"\\t\";\n\tif (typeof(eol) == 'undefined') eol = \"\\n\";\n\tvar xml = \"\";\n\t\n\t// If this is the root node, set the indent to 0\n\t// and setup the XML header (PI node)\n\tif (!indent) {\n\t\tindent = 0;\n\t\txml = xml_header + eol;\n\t\t\n\t\tif (!name) {\n\t\t\t// no name provided, assume content is wrapped in it\n\t\t\tname = first_key(node);\n\t\t\tnode = node[name];\n\t\t}\n\t}\n\t\n\t// Setup the indent text\n\tvar indent_text = \"\";\n\tfor (var k = 0; k < indent; k++) indent_text += indent_string;\n\t\n\tif ((typeof(node) == 'object') && (node != null)) {\n\t\t// node is object -- now see if it is an array or hash\n\t\tif (!node.length) { // what about zero-length array?\n\t\t\t// node is hash\n\t\t\txml += indent_text + \"<\" + name;\n\t\t\t\n\t\t\tvar num_keys = 0;\n\t\t\tvar has_attribs = 0;\n\t\t\tfor (var key in node) num_keys++; // there must be a better way...\n\t\t\t\n\t\t\tif (node[\"_Attribs\"]) {\n\t\t\t\thas_attribs = 1;\n\t\t\t\tvar sorted_keys = hash_keys_to_array(node[\"_Attribs\"]).sort();\n\t\t\t\tfor (var idx = 0, len = sorted_keys.length; idx < len; idx++) {\n\t\t\t\t\tvar key = sorted_keys[idx];\n\t\t\t\t\txml += \" \" + key + \"=\\\"\" + encode_attrib_entities(node[\"_Attribs\"][key]) + \"\\\"\";\n\t\t\t\t}\n\t\t\t} // has attribs\n\t\t\t\n\t\t\tif (num_keys > has_attribs) {\n\t\t\t\t// has child elements\n\t\t\t\txml += \">\";\n\t\t\t\t\n\t\t\t\tif (node[\"_Data\"]) {\n\t\t\t\t\t// simple text child node\n\t\t\t\t\txml += encode_entities(node[\"_Data\"]) + \"</\" + name + \">\" + eol;\n\t\t\t\t} // just text\n\t\t\t\telse {\n\t\t\t\t\txml += eol;\n\t\t\t\t\t\n\t\t\t\t\tvar sorted_keys = hash_keys_to_array(node).sort();\n\t\t\t\t\tfor (var idx = 0, len = sorted_keys.length; idx < len; idx++) {\n\t\t\t\t\t\tvar key = sorted_keys[idx];\t\t\t\t\t\n\t\t\t\t\t\tif ((key != \"_Attribs\") && key.match(re_valid_tag_name)) {\n\t\t\t\t\t\t\t// recurse for node, with incremented indent value\n\t\t\t\t\t\t\txml += compose_xml( node[key], key, indent + 1, indent_string, eol );\n\t\t\t\t\t\t} // not _Attribs key\n\t\t\t\t\t} // foreach key\n\t\t\t\t\t\n\t\t\t\t\txml += indent_text + \"</\" + name + \">\" + eol;\n\t\t\t\t} // real children\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// no child elements, so self-close\n\t\t\t\txml += \"/>\" + eol;\n\t\t\t}\n\t\t} // standard node\n\t\telse {\n\t\t\t// node is array\n\t\t\tfor (var idx = 0; idx < node.length; idx++) {\n\t\t\t\t// recurse for node in array with same indent\n\t\t\t\txml += compose_xml( node[idx], name, indent, indent_string, eol );\n\t\t\t}\n\t\t} // array of nodes\n\t} // complex node\n\telse {\n\t\t// node is simple string\n\t\txml += indent_text + \"<\" + name + \">\" + encode_entities(node) + \"</\" + name + \">\" + eol;\n\t} // simple text node\n\t\n\treturn xml;\n};\n\nvar always_array = exports.alwaysArray = function always_array(obj, key) {\n\t// if object is not array, return array containing object\n\t// if key is passed, work like XMLalwaysarray() instead\n\tif (key) {\n\t\tif ((typeof(obj[key]) != 'object') || (typeof(obj[key].length) == 'undefined')) {\n\t\t\tvar temp = obj[key];\n\t\t\tdelete obj[key];\n\t\t\tobj[key] = new Array();\n\t\t\tobj[key][0] = temp;\n\t\t}\n\t\treturn null;\n\t}\n\telse {\n\t\tif ((typeof(obj) != 'object') || (typeof(obj.length) == 'undefined')) { return [ obj ]; }\n\t\telse return obj;\n\t}\n};\n\nvar hash_keys_to_array = exports.hashKeysToArray = function hash_keys_to_array(hash) {\n\t// convert hash keys to array (discard values)\n\tvar array = [];\n\tfor (var key in hash) array.push(key);\n\treturn array;\n};\n\nvar isa_array = exports.isaArray = function isa_array(arg) {\n\t// determine if arg is an array or is array-like\n\treturn isArray(arg);\n};\n\nvar isa_hash = exports.isaHash = function isa_hash(arg) {\n\t// determine if arg is a hash\n\treturn( !!arg && (typeof(arg) == 'object') && !isa_array(arg) );\n};\n\nvar first_key = exports.firstKey = function first_key(hash) {\n\t// return first key from hash (unordered)\n\tfor (var key in hash) return key;\n\treturn null; // no keys in hash\n};\n\nvar num_keys = exports.numKeys = function num_keys(hash) {\n\t// count the number of keys in a hash\n\tvar count = 0;\n\tfor (var a in hash) count++;\n\treturn count;\n};\n"}